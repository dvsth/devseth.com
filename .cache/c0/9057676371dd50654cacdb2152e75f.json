{"id":"cioH","dependencies":[{"name":"/Users/dvsth/Code/devseth.com/package.json","includedInParent":true,"mtime":1612397970111}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.default=void 0;var e=function(){return{uniforms:{tDiffuse:{value:null},tDepth:{value:null},scan:{value:0},cameraNear:{value:0},cameraFar:{value:1}},vertexShader:\"\\n    varying vec2 vUv;\\n    void main() {\\n      vUv = uv;\\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n    }\\n  \",fragmentShader:\"\\n    #include <packing>\\n\\n    varying vec2 vUv;\\n\\n    uniform sampler2D tDiffuse;\\n    uniform sampler2D tDepth;\\n\\n    uniform float cameraNear;\\n    uniform float cameraFar;\\n\\n    uniform float scan;\\n\\n    float readDepth(sampler2D depthSampler, vec2 coord) {\\n      float fragCoordZ = texture2D(depthSampler, coord).x;\\n      float viewZ = perspectiveDepthToViewZ(fragCoordZ, cameraNear, cameraFar);\\n      return viewZToOrthographicDepth(viewZ, cameraNear, cameraFar);\\n    }\\n    \\n    void main()\\n    {\\n      vec4 color = texture2D(tDiffuse, vUv);\\n      float depth = readDepth(tDepth, vUv);\\n\\n      float scanClamp = clamp(scan, 0.0, 1.0);\\n\\n      color.r += pow(1.0 - abs(depth-scanClamp), 140.0) * (1.0 - pow(depth, 10.0));\\n\\n      gl_FragColor = color;\\n    }\\n  \"}};exports.default=e;"},"sourceMaps":null,"error":null,"hash":"0b3ac2612057c8a98e832d4722844146","cacheData":{"env":{}}}