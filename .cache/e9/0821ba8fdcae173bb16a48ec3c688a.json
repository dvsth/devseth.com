{"id":"LM4x","dependencies":[{"name":"/Users/dvsth/Code/devseth.com/package.json","includedInParent":true,"mtime":1612397970111},{"name":"three","loc":{"line":1,"column":23},"parent":"/Users/dvsth/Code/devseth.com/src/shaders/ASCII.js","resolved":"/Users/dvsth/Code/devseth.com/node_modules/three/build/three.module.js"}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.default=void 0;var e=n(require(\"three\"));function r(){if(\"function\"!=typeof WeakMap)return null;var e=new WeakMap;return r=function(){return e},e}function n(e){if(e&&e.__esModule)return e;if(null===e||\"object\"!=typeof e&&\"function\"!=typeof e)return{default:e};var n=r();if(n&&n.has(e))return n.get(e);var t={},o=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var a in e)if(Object.prototype.hasOwnProperty.call(e,a)){var u=o?Object.getOwnPropertyDescriptor(e,a):null;u&&(u.get||u.set)?Object.defineProperty(t,a,u):t[a]=e[a]}return t.default=e,n&&n.set(e,t),t}var t=function(){return{uniforms:{tLowRes:{value:null},tFont:{value:null},tDepth:{value:null},fontCharTotalCount:{value:0},fontCharCount:{value:new e.Vector2(1,1)},fontCharSize:{value:new e.Vector2(1,1)},renderCharCount:{value:new e.Vector2(1,1)},renderCharSize:{value:new e.Vector2(1,1)},cameraNear:{value:0},cameraFar:{value:1}},vertexShader:\"\\n    varying vec2 vUv;\\n    void main() {\\n      vUv = uv;\\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n    }\\n  \",fragmentShader:\"\\n   #include <packing>\\n\\n    varying vec2 vUv;\\n    uniform sampler2D tLowRes;\\n    uniform sampler2D tDepth;\\n    uniform sampler2D tFont;\\n\\n    uniform float cameraNear;\\n    uniform float cameraFar;\\n\\n    uniform float fontCharTotalCount;\\n    uniform vec2 fontCharSize;\\n    uniform vec2 fontCharCount;\\n\\n    uniform vec2 renderCharCount;\\n    uniform vec2 renderCharSize;\\n\\n    float readDepth(sampler2D depthSampler, vec2 coord) {\\n      float fragCoordZ = texture2D(depthSampler, coord).x;\\n      float viewZ = perspectiveDepthToViewZ(fragCoordZ, cameraNear, cameraFar);\\n      return viewZToOrthographicDepth(viewZ, cameraNear, cameraFar);\\n    }\\n\\n    void main()\\n    {\\n      vec2 roundedUv = vec2(\\n        floor(vUv.x * renderCharCount.x),\\n        floor(vUv.y * renderCharCount.y)\\n      ) * renderCharSize;\\n\\n      float depth = readDepth(tDepth, roundedUv);\\n      vec4 color = texture2D(tLowRes, roundedUv);\\n    \\n      float charIndex = depth * fontCharTotalCount;\\n\\n      vec2 fontuv = vec2(\\n        mod(vUv.x, renderCharSize.x),\\n        mod(vUv.y, renderCharSize.y)\\n      ) * renderCharCount * fontCharSize + vec2(\\n        floor(mod(charIndex, fontCharCount.x)) * fontCharSize.x,\\n        floor(charIndex * fontCharSize.x) * fontCharSize.y\\n      );\\n      \\n      gl_FragColor = texture2D(tFont, fontuv) * color;\\n    }\\n  \"}};exports.default=t;"},"sourceMaps":null,"error":null,"hash":"6439231916ffa263f4d33223a446b57d","cacheData":{"env":{}}}