{"id":"cioH","dependencies":[{"name":"C:\\Users\\Dev Seth\\Personal Programs\\website-examples\\3d-header\\final-result\\package.json","includedInParent":true,"mtime":1594046217713}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.default=void 0;var e=function(){return{uniforms:{tDiffuse:{value:null},tDepth:{value:null},scan:{value:0},cameraNear:{value:0},cameraFar:{value:1}},vertexShader:\"\\n    varying vec2 vUv;\\n    void main() {\\n      vUv = uv;\\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n    }\\n  \",fragmentShader:\"\\n    #include <packing>\\n\\n    varying vec2 vUv;\\n\\n    uniform sampler2D tDiffuse;\\n    uniform sampler2D tDepth;\\n\\n    uniform float cameraNear;\\n    uniform float cameraFar;\\n\\n    uniform float scan;\\n\\n    float readDepth(sampler2D depthSampler, vec2 coord) {\\n      float fragCoordZ = texture2D(depthSampler, coord).x;\\n      float viewZ = perspectiveDepthToViewZ(fragCoordZ, cameraNear, cameraFar);\\n      return viewZToOrthographicDepth(viewZ, cameraNear, cameraFar);\\n    }\\n    \\n    void main()\\n    {\\n      vec4 color = texture2D(tDiffuse, vUv);\\n      float depth = readDepth(tDepth, vUv);\\n\\n      float scanClamp = clamp(scan, 0.0, 1.0);\\n\\n      color.r += pow(1.0 - abs(depth-scanClamp), 140.0) * (1.0 - pow(depth, 10.0));\\n\\n      gl_FragColor = color;\\n    }\\n  \"}};exports.default=e;"},"sourceMaps":{"js":{"mappings":[{"source":"src/shaders/Scan.js","original":{"line":1,"column":15},"generated":{"line":1,"column":0}},{"source":"src/shaders/Scan.js","original":{"line":1,"column":15},"generated":{"line":1,"column":13}},{"source":"src/shaders/Scan.js","original":{"line":1,"column":15},"generated":{"line":1,"column":20}},{"source":"src/shaders/Scan.js","original":{"line":1,"column":15},"generated":{"line":1,"column":35}},{"source":"src/shaders/Scan.js","original":{"line":1,"column":15},"generated":{"line":1,"column":43}},{"source":"src/shaders/Scan.js","original":{"line":1,"column":15},"generated":{"line":1,"column":56}},{"source":"src/shaders/Scan.js","original":{"line":1,"column":15},"generated":{"line":1,"column":57}},{"source":"src/shaders/Scan.js","original":{"line":1,"column":15},"generated":{"line":1,"column":64}},{"source":"src/shaders/Scan.js","original":{"line":1,"column":15},"generated":{"line":1,"column":68}},{"source":"src/shaders/Scan.js","original":{"line":1,"column":15},"generated":{"line":1,"column":76}},{"source":"src/shaders/Scan.js","original":{"line":1,"column":15},"generated":{"line":1,"column":89}},{"source":"src/shaders/Scan.js","original":{"line":1,"column":15},"generated":{"line":1,"column":91}},{"source":"src/shaders/Scan.js","original":{"line":1,"column":15},"generated":{"line":1,"column":95}},{"source":"src/shaders/Scan.js","original":{"line":1,"column":15},"generated":{"line":1,"column":97}},{"source":"src/shaders/Scan.js","original":{"line":1,"column":22},"generated":{"line":1,"column":108}},{"source":"src/shaders/Scan.js","original":{"line":1,"column":22},"generated":{"line":1,"column":114}},{"source":"src/shaders/Scan.js","name":"uniforms","original":{"line":2,"column":2},"generated":{"line":1,"column":115}},{"source":"src/shaders/Scan.js","original":{"line":2,"column":12},"generated":{"line":1,"column":124}},{"source":"src/shaders/Scan.js","name":"tDiffuse","original":{"line":3,"column":4},"generated":{"line":1,"column":125}},{"source":"src/shaders/Scan.js","original":{"line":3,"column":14},"generated":{"line":1,"column":134}},{"source":"src/shaders/Scan.js","name":"value","original":{"line":3,"column":16},"generated":{"line":1,"column":135}},{"source":"src/shaders/Scan.js","original":{"line":3,"column":23},"generated":{"line":1,"column":141}},{"source":"src/shaders/Scan.js","name":"tDepth","original":{"line":4,"column":4},"generated":{"line":1,"column":147}},{"source":"src/shaders/Scan.js","original":{"line":4,"column":12},"generated":{"line":1,"column":154}},{"source":"src/shaders/Scan.js","name":"value","original":{"line":4,"column":14},"generated":{"line":1,"column":155}},{"source":"src/shaders/Scan.js","original":{"line":4,"column":21},"generated":{"line":1,"column":161}},{"source":"src/shaders/Scan.js","name":"scan","original":{"line":5,"column":4},"generated":{"line":1,"column":167}},{"source":"src/shaders/Scan.js","original":{"line":5,"column":10},"generated":{"line":1,"column":172}},{"source":"src/shaders/Scan.js","name":"value","original":{"line":5,"column":12},"generated":{"line":1,"column":173}},{"source":"src/shaders/Scan.js","original":{"line":5,"column":19},"generated":{"line":1,"column":179}},{"source":"src/shaders/Scan.js","name":"cameraNear","original":{"line":6,"column":4},"generated":{"line":1,"column":182}},{"source":"src/shaders/Scan.js","original":{"line":6,"column":16},"generated":{"line":1,"column":193}},{"source":"src/shaders/Scan.js","name":"value","original":{"line":6,"column":18},"generated":{"line":1,"column":194}},{"source":"src/shaders/Scan.js","original":{"line":6,"column":25},"generated":{"line":1,"column":200}},{"source":"src/shaders/Scan.js","name":"cameraFar","original":{"line":7,"column":4},"generated":{"line":1,"column":203}},{"source":"src/shaders/Scan.js","original":{"line":7,"column":15},"generated":{"line":1,"column":213}},{"source":"src/shaders/Scan.js","name":"value","original":{"line":7,"column":17},"generated":{"line":1,"column":214}},{"source":"src/shaders/Scan.js","original":{"line":7,"column":24},"generated":{"line":1,"column":220}},{"source":"src/shaders/Scan.js","name":"vertexShader","original":{"line":9,"column":2},"generated":{"line":1,"column":224}},{"source":"src/shaders/Scan.js","original":{"line":1,"column":22},"generated":{"line":1,"column":237}},{"source":"src/shaders/Scan.js","name":"fragmentShader","original":{"line":16,"column":2},"generated":{"line":1,"column":389}},{"source":"src/shaders/Scan.js","original":{"line":16,"column":16},"generated":{"line":1,"column":404}},{"source":"src/shaders/Scan.js","original":{"line":1,"column":15},"generated":{"line":1,"column":1193}},{"source":"src/shaders/Scan.js","original":{"line":1,"column":15},"generated":{"line":1,"column":1201}},{"source":"src/shaders/Scan.js","original":{"line":1,"column":15},"generated":{"line":1,"column":1209}}],"sources":{"src/shaders/Scan.js":"export default () => ({\r\n  uniforms: {\r\n    tDiffuse: { value: null },\r\n    tDepth: { value: null },\r\n    scan: { value: 0 },\r\n    cameraNear: { value: 0 },\r\n    cameraFar: { value: 1 },\r\n  },\r\n  vertexShader: `\r\n    varying vec2 vUv;\r\n    void main() {\r\n      vUv = uv;\r\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n    }\r\n  `,\r\n  fragmentShader: `\r\n    #include <packing>\r\n\r\n    varying vec2 vUv;\r\n\r\n    uniform sampler2D tDiffuse;\r\n    uniform sampler2D tDepth;\r\n\r\n    uniform float cameraNear;\r\n    uniform float cameraFar;\r\n\r\n    uniform float scan;\r\n\r\n    float readDepth(sampler2D depthSampler, vec2 coord) {\r\n      float fragCoordZ = texture2D(depthSampler, coord).x;\r\n      float viewZ = perspectiveDepthToViewZ(fragCoordZ, cameraNear, cameraFar);\r\n      return viewZToOrthographicDepth(viewZ, cameraNear, cameraFar);\r\n    }\r\n    \r\n    void main()\r\n    {\r\n      vec4 color = texture2D(tDiffuse, vUv);\r\n      float depth = readDepth(tDepth, vUv);\r\n\r\n      float scanClamp = clamp(scan, 0.0, 1.0);\r\n\r\n      color.r += pow(1.0 - abs(depth-scanClamp), 140.0) * (1.0 - pow(depth, 10.0));\r\n\r\n      gl_FragColor = color;\r\n    }\r\n  `,\r\n})\r\n"},"lineCount":null}},"error":null,"hash":"46fd4b96b69d5a8bfcf76fe351268404","cacheData":{"env":{}}}