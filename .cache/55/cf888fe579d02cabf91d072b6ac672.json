{"id":"src/shaders/Scan.js","dependencies":[{"name":"C:\\Users\\Dev\\Desktop\\Code\\devseth.com\\package.json","includedInParent":true,"mtime":1620934799393}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _default = function _default() {\n  return {\n    uniforms: {\n      tDiffuse: {\n        value: null\n      },\n      tDepth: {\n        value: null\n      },\n      scan: {\n        value: 0\n      },\n      cameraNear: {\n        value: 0\n      },\n      cameraFar: {\n        value: 1\n      }\n    },\n    vertexShader: \"\\n    varying vec2 vUv;\\n    void main() {\\n      vUv = uv;\\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n    }\\n  \",\n    fragmentShader: \"\\n    #include <packing>\\n\\n    varying vec2 vUv;\\n\\n    uniform sampler2D tDiffuse;\\n    uniform sampler2D tDepth;\\n\\n    uniform float cameraNear;\\n    uniform float cameraFar;\\n\\n    uniform float scan;\\n\\n    float readDepth(sampler2D depthSampler, vec2 coord) {\\n      float fragCoordZ = texture2D(depthSampler, coord).x;\\n      float viewZ = perspectiveDepthToViewZ(fragCoordZ, cameraNear, cameraFar);\\n      return viewZToOrthographicDepth(viewZ, cameraNear, cameraFar);\\n    }\\n    \\n    void main()\\n    {\\n      vec4 color = texture2D(tDiffuse, vUv);\\n      float depth = readDepth(tDepth, vUv);\\n\\n      float scanClamp = clamp(scan, 0.0, 1.0);\\n\\n      color.r += pow(1.0 - abs(depth-scanClamp), 140.0) * (1.0 - pow(depth, 10.0));\\n\\n      gl_FragColor = color;\\n    }\\n  \"\n  };\n};\n\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":8,"column":15},"source":"src/shaders/Scan.js","original":{"line":1,"column":15}},{"generated":{"line":9,"column":0},"source":"src/shaders/Scan.js","original":{"line":1,"column":15}},{"generated":{"line":9,"column":9},"source":"src/shaders/Scan.js","original":{"line":1,"column":22}},{"name":"uniforms","generated":{"line":10,"column":0},"source":"src/shaders/Scan.js","original":{"line":2,"column":2}},{"name":"uniforms","generated":{"line":10,"column":4},"source":"src/shaders/Scan.js","original":{"line":2,"column":2}},{"generated":{"line":10,"column":12},"source":"src/shaders/Scan.js","original":{"line":2,"column":10}},{"generated":{"line":10,"column":14},"source":"src/shaders/Scan.js","original":{"line":2,"column":12}},{"name":"tDiffuse","generated":{"line":11,"column":0},"source":"src/shaders/Scan.js","original":{"line":3,"column":4}},{"name":"tDiffuse","generated":{"line":11,"column":6},"source":"src/shaders/Scan.js","original":{"line":3,"column":4}},{"generated":{"line":11,"column":14},"source":"src/shaders/Scan.js","original":{"line":3,"column":12}},{"generated":{"line":11,"column":16},"source":"src/shaders/Scan.js","original":{"line":3,"column":14}},{"name":"value","generated":{"line":12,"column":0},"source":"src/shaders/Scan.js","original":{"line":3,"column":16}},{"name":"value","generated":{"line":12,"column":8},"source":"src/shaders/Scan.js","original":{"line":3,"column":16}},{"generated":{"line":12,"column":13},"source":"src/shaders/Scan.js","original":{"line":3,"column":21}},{"generated":{"line":12,"column":15},"source":"src/shaders/Scan.js","original":{"line":3,"column":23}},{"generated":{"line":13,"column":0},"source":"src/shaders/Scan.js","original":{"line":3,"column":14}},{"generated":{"line":13,"column":7},"source":"src/shaders/Scan.js","original":{"line":2,"column":12}},{"name":"tDepth","generated":{"line":14,"column":0},"source":"src/shaders/Scan.js","original":{"line":4,"column":4}},{"name":"tDepth","generated":{"line":14,"column":6},"source":"src/shaders/Scan.js","original":{"line":4,"column":4}},{"generated":{"line":14,"column":12},"source":"src/shaders/Scan.js","original":{"line":4,"column":10}},{"generated":{"line":14,"column":14},"source":"src/shaders/Scan.js","original":{"line":4,"column":12}},{"name":"value","generated":{"line":15,"column":0},"source":"src/shaders/Scan.js","original":{"line":4,"column":14}},{"name":"value","generated":{"line":15,"column":8},"source":"src/shaders/Scan.js","original":{"line":4,"column":14}},{"generated":{"line":15,"column":13},"source":"src/shaders/Scan.js","original":{"line":4,"column":19}},{"generated":{"line":15,"column":15},"source":"src/shaders/Scan.js","original":{"line":4,"column":21}},{"generated":{"line":16,"column":0},"source":"src/shaders/Scan.js","original":{"line":4,"column":12}},{"generated":{"line":16,"column":7},"source":"src/shaders/Scan.js","original":{"line":2,"column":12}},{"name":"scan","generated":{"line":17,"column":0},"source":"src/shaders/Scan.js","original":{"line":5,"column":4}},{"name":"scan","generated":{"line":17,"column":6},"source":"src/shaders/Scan.js","original":{"line":5,"column":4}},{"generated":{"line":17,"column":10},"source":"src/shaders/Scan.js","original":{"line":5,"column":8}},{"generated":{"line":17,"column":12},"source":"src/shaders/Scan.js","original":{"line":5,"column":10}},{"name":"value","generated":{"line":18,"column":0},"source":"src/shaders/Scan.js","original":{"line":5,"column":12}},{"name":"value","generated":{"line":18,"column":8},"source":"src/shaders/Scan.js","original":{"line":5,"column":12}},{"generated":{"line":18,"column":13},"source":"src/shaders/Scan.js","original":{"line":5,"column":17}},{"generated":{"line":18,"column":15},"source":"src/shaders/Scan.js","original":{"line":5,"column":19}},{"generated":{"line":19,"column":0},"source":"src/shaders/Scan.js","original":{"line":5,"column":10}},{"generated":{"line":19,"column":7},"source":"src/shaders/Scan.js","original":{"line":2,"column":12}},{"name":"cameraNear","generated":{"line":20,"column":0},"source":"src/shaders/Scan.js","original":{"line":6,"column":4}},{"name":"cameraNear","generated":{"line":20,"column":6},"source":"src/shaders/Scan.js","original":{"line":6,"column":4}},{"generated":{"line":20,"column":16},"source":"src/shaders/Scan.js","original":{"line":6,"column":14}},{"generated":{"line":20,"column":18},"source":"src/shaders/Scan.js","original":{"line":6,"column":16}},{"name":"value","generated":{"line":21,"column":0},"source":"src/shaders/Scan.js","original":{"line":6,"column":18}},{"name":"value","generated":{"line":21,"column":8},"source":"src/shaders/Scan.js","original":{"line":6,"column":18}},{"generated":{"line":21,"column":13},"source":"src/shaders/Scan.js","original":{"line":6,"column":23}},{"generated":{"line":21,"column":15},"source":"src/shaders/Scan.js","original":{"line":6,"column":25}},{"generated":{"line":22,"column":0},"source":"src/shaders/Scan.js","original":{"line":6,"column":16}},{"generated":{"line":22,"column":7},"source":"src/shaders/Scan.js","original":{"line":2,"column":12}},{"name":"cameraFar","generated":{"line":23,"column":0},"source":"src/shaders/Scan.js","original":{"line":7,"column":4}},{"name":"cameraFar","generated":{"line":23,"column":6},"source":"src/shaders/Scan.js","original":{"line":7,"column":4}},{"generated":{"line":23,"column":15},"source":"src/shaders/Scan.js","original":{"line":7,"column":13}},{"generated":{"line":23,"column":17},"source":"src/shaders/Scan.js","original":{"line":7,"column":15}},{"name":"value","generated":{"line":24,"column":0},"source":"src/shaders/Scan.js","original":{"line":7,"column":17}},{"name":"value","generated":{"line":24,"column":8},"source":"src/shaders/Scan.js","original":{"line":7,"column":17}},{"generated":{"line":24,"column":13},"source":"src/shaders/Scan.js","original":{"line":7,"column":22}},{"generated":{"line":24,"column":15},"source":"src/shaders/Scan.js","original":{"line":7,"column":24}},{"generated":{"line":25,"column":0},"source":"src/shaders/Scan.js","original":{"line":7,"column":15}},{"generated":{"line":26,"column":0},"source":"src/shaders/Scan.js","original":{"line":2,"column":12}},{"generated":{"line":26,"column":5},"source":"src/shaders/Scan.js","original":{"line":1,"column":22}},{"name":"vertexShader","generated":{"line":27,"column":0},"source":"src/shaders/Scan.js","original":{"line":9,"column":2}},{"name":"vertexShader","generated":{"line":27,"column":4},"source":"src/shaders/Scan.js","original":{"line":9,"column":2}},{"generated":{"line":27,"column":16},"source":"src/shaders/Scan.js","original":{"line":9,"column":14}},{"generated":{"line":27,"column":169},"source":"src/shaders/Scan.js","original":{"line":1,"column":22}},{"name":"fragmentShader","generated":{"line":28,"column":0},"source":"src/shaders/Scan.js","original":{"line":16,"column":2}},{"name":"fragmentShader","generated":{"line":28,"column":4},"source":"src/shaders/Scan.js","original":{"line":16,"column":2}},{"generated":{"line":28,"column":18},"source":"src/shaders/Scan.js","original":{"line":16,"column":16}},{"generated":{"line":29,"column":0},"source":"src/shaders/Scan.js","original":{"line":1,"column":22}},{"generated":{"line":29,"column":3},"source":"src/shaders/Scan.js","original":{"line":1,"column":15}},{"generated":{"line":30,"column":0},"source":"src/shaders/Scan.js","original":{"line":1,"column":15}}],"sources":{"src/shaders/Scan.js":"export default () => ({\r\n  uniforms: {\r\n    tDiffuse: { value: null },\r\n    tDepth: { value: null },\r\n    scan: { value: 0 },\r\n    cameraNear: { value: 0 },\r\n    cameraFar: { value: 1 },\r\n  },\r\n  vertexShader: `\r\n    varying vec2 vUv;\r\n    void main() {\r\n      vUv = uv;\r\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n    }\r\n  `,\r\n  fragmentShader: `\r\n    #include <packing>\r\n\r\n    varying vec2 vUv;\r\n\r\n    uniform sampler2D tDiffuse;\r\n    uniform sampler2D tDepth;\r\n\r\n    uniform float cameraNear;\r\n    uniform float cameraFar;\r\n\r\n    uniform float scan;\r\n\r\n    float readDepth(sampler2D depthSampler, vec2 coord) {\r\n      float fragCoordZ = texture2D(depthSampler, coord).x;\r\n      float viewZ = perspectiveDepthToViewZ(fragCoordZ, cameraNear, cameraFar);\r\n      return viewZToOrthographicDepth(viewZ, cameraNear, cameraFar);\r\n    }\r\n    \r\n    void main()\r\n    {\r\n      vec4 color = texture2D(tDiffuse, vUv);\r\n      float depth = readDepth(tDepth, vUv);\r\n\r\n      float scanClamp = clamp(scan, 0.0, 1.0);\r\n\r\n      color.r += pow(1.0 - abs(depth-scanClamp), 140.0) * (1.0 - pow(depth, 10.0));\r\n\r\n      gl_FragColor = color;\r\n    }\r\n  `,\r\n})\r\n"},"lineCount":null}},"error":null,"hash":"8dfe6ca3d6983490017060249fb89aa3","cacheData":{"env":{}}}