{"id":"LwGW","dependencies":[{"name":"C:\\Users\\Dev Seth\\Personal Programs\\devseth.com\\source\\package.json","includedInParent":true,"mtime":1594300498284},{"name":"three","loc":{"line":1,"column":43},"parent":"C:\\Users\\Dev Seth\\Personal Programs\\devseth.com\\source\\src\\shaders\\VertexLitParticle.js","resolved":"C:\\Users\\Dev Seth\\Personal Programs\\devseth.com\\source\\node_modules\\three\\build\\three.module.js"}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.default=void 0;var n=require(\"three\"),t=function(){return{lights:!0,uniforms:n.UniformsUtils.merge([n.UniformsLib.lights,{pointSize:{value:2},decayModifier:{value:1}}]),vertexShader:\"\\n    #include <common>\\n\\n    struct PointLight {\\n      vec3 position;\\n      vec3 color;\\n      float distance;\\n      float decay;\\n      int shadow;\\n      float shadowBias;\\n      float shadowRadius;\\n      vec2 shadowMapSize;\\n      float shadowCameraNear;\\n      float shadowCameraFar;\\n    };\\n\\n    uniform PointLight pointLights[NUM_POINT_LIGHTS];\\n    uniform float pointSize;\\n    uniform float decayModifier;\\n\\n    varying vec4 vColor;\\n\\n    float _punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n    \\tif( decayExponent > 0.0 ) {\\n    \\t\\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n    \\t}\\n    \\treturn 1.0;\\n    }\\n\\n    void main()\\n    {\\n      vec4 worldPosition = modelMatrix * vec4(position, 1.0);\\n      vec4 modelViewPosition = modelViewMatrix * vec4(position, 1.0);\\n      gl_Position = projectionMatrix * modelViewPosition;\\n\\n      gl_PointSize = pointSize;\\n      vec4 addedLights = vec4(0.1, 0.1, 0.1, 1.0);\\n      for(int l = 0; l < NUM_POINT_LIGHTS; l++) {\\n        float dist = distance(pointLights[l].position, modelViewPosition.xyz);\\n        addedLights.rgb += pointLights[l].color *\\n        _punctualLightIntensityToIrradianceFactor(\\n            dist,\\n            pointLights[l].distance,\\n            pointLights[l].decay * decayModifier\\n          );\\n      }\\n      vColor = addedLights;\\n    }\\n  \",fragmentShader:\"\\n    varying vec4 vColor;\\n\\n    void main() {\\n      gl_FragColor = vColor;\\n    }\\n  \"}};exports.default=t;"},"sourceMaps":null,"error":null,"hash":"18d7424d60ad6af7be65d40931043e15","cacheData":{"env":{}}}